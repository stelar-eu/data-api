{
  "components": {
    "schemas": {
      "Artifact": {
        "properties": {
          "artifact_metadata": {
            "type": "object"
          }, 
          "package_metadata": {
            "type": "object"
          }
        }, 
        "required": [
          "artifact_metadata", 
          "package_metadata"
        ], 
        "type": "object"
      }, 
      "BasicMetadata": {
        "properties": {
          "extra": {
            "type": "object"
          }, 
          "notes": {
            "maxLength": 10000, 
            "minLength": 0, 
            "type": "string"
          }, 
          "private": {
            "default": false, 
            "type": "boolean"
          }, 
          "tags": {
            "items": {
              "type": "string"
            }, 
            "type": "array"
          }, 
          "title": {
            "maxLength": 200, 
            "minLength": 0, 
            "type": "string"
          }, 
          "url": {
            "format": "url", 
            "type": "string"
          }
        }, 
        "required": [
          "notes", 
          "tags", 
          "title"
        ], 
        "type": "object"
      }, 
      "ChangedUser": {
        "properties": {
          "about": {
            "maxLength": 1000, 
            "minLength": 0, 
            "type": "string"
          }, 
          "email": {
            "maxLength": 100, 
            "minLength": 0, 
            "type": "string"
          }, 
          "fullname": {
            "maxLength": 100, 
            "minLength": 0, 
            "type": "string"
          }, 
          "id": {
            "maxLength": 50, 
            "minLength": 0, 
            "type": "string"
          }, 
          "image_url": {
            "maxLength": 200, 
            "minLength": 0, 
            "type": "string"
          }, 
          "name": {
            "maxLength": 20, 
            "minLength": 0, 
            "type": "string"
          }, 
          "password": {
            "maxLength": 20, 
            "minLength": 0, 
            "type": "string"
          }
        }, 
        "required": [
          "id"
        ], 
        "type": "object"
      }, 
      "Dataset": {
        "properties": {
          "basic_metadata": {
            "$ref": "#/components/schemas/BasicMetadata"
          }, 
          "extra_metadata": {
            "$ref": "#/components/schemas/ExtraMetadata"
          }, 
          "profile_metadata": {
            "type": "object"
          }
        }, 
        "required": [
          "basic_metadata"
        ], 
        "type": "object"
      }, 
      "ExtraMetadata": {
        "properties": {
          "documentation": {
            "maxLength": 10000, 
            "minLength": 0, 
            "type": "string"
          }, 
          "extra": {
            "type": "object"
          }, 
          "frequency": {
            "maxLength": 200, 
            "minLength": 0, 
            "type": "string"
          }, 
          "language": {
            "items": {
              "type": "string"
            }, 
            "type": "array"
          }, 
          "spatial": {
            "maxLength": 10000, 
            "minLength": 0, 
            "type": "string"
          }, 
          "spatial_resolution_in_meters": {
            "maxLength": 200, 
            "minLength": 0, 
            "type": "string"
          }, 
          "temporal_end": {
            "format": "date-time", 
            "maxLength": 30, 
            "minLength": 0, 
            "type": "string"
          }, 
          "temporal_start": {
            "format": "date-time", 
            "maxLength": 30, 
            "minLength": 0, 
            "type": "string"
          }, 
          "theme": {
            "items": {
              "type": "string"
            }, 
            "type": "array"
          }
        }, 
        "type": "object"
      }, 
      "Filter": {
        "properties": {
          "q": {
            "example": "format:JSON", 
            "type": "string"
          }
        }, 
        "type": "object"
      }, 
      "HTTPError": {
        "properties": {
          "detail": {
            "type": "object"
          }, 
          "message": {
            "type": "string"
          }
        }, 
        "type": "object"
      }, 
      "Identifier": {
        "properties": {
          "id": {
            "example": "6dc36257-abb6-45b5-b3bb-5f94160fc2ee", 
            "maxLength": 64, 
            "minLength": 0, 
            "type": "string"
          }
        }, 
        "type": "object"
      }, 
      "NewToken": {
        "properties": {
          "name": {
            "maxLength": 50, 
            "minLength": 0, 
            "type": "string"
          }, 
          "user": {
            "maxLength": 50, 
            "minLength": 0, 
            "type": "string"
          }
        }, 
        "required": [
          "name", 
          "user"
        ], 
        "type": "object"
      }, 
      "NewUser": {
        "properties": {
          "about": {
            "maxLength": 1000, 
            "minLength": 0, 
            "type": "string"
          }, 
          "email": {
            "maxLength": 100, 
            "minLength": 0, 
            "type": "string"
          }, 
          "fullname": {
            "maxLength": 100, 
            "minLength": 0, 
            "type": "string"
          }, 
          "image_url": {
            "maxLength": 200, 
            "minLength": 0, 
            "type": "string"
          }, 
          "name": {
            "maxLength": 20, 
            "minLength": 0, 
            "type": "string"
          }, 
          "password": {
            "maxLength": 20, 
            "minLength": 0, 
            "type": "string"
          }
        }, 
        "required": [
          "email", 
          "fullname", 
          "name", 
          "password"
        ], 
        "type": "object"
      }, 
      "Package": {
        "properties": {
          "package_metadata": {
            "type": "object"
          }
        }, 
        "required": [
          "package_metadata"
        ], 
        "type": "object"
      }, 
      "Profile": {
        "properties": {
          "profile_metadata": {
            "type": "object"
          }
        }, 
        "required": [
          "profile_metadata"
        ], 
        "type": "object"
      }, 
      "Query": {
        "properties": {
          "q": {
            "type": "object"
          }
        }, 
        "required": [
          "q"
        ], 
        "type": "object"
      }, 
      "Ranking": {
        "properties": {
          "filter_preferences": {
            "type": "object"
          }, 
          "ids": {
            "items": {
              "type": "string"
            }, 
            "type": "array"
          }, 
          "keywords": {
            "items": {
              "type": "string"
            }, 
            "type": "array"
          }, 
          "rank_preferences": {
            "type": "object"
          }, 
          "settings": {
            "type": "object"
          }
        }, 
        "type": "object"
      }, 
      "Resource": {
        "properties": {
          "resource_metadata": {
            "type": "object"
          }
        }, 
        "required": [
          "resource_metadata"
        ], 
        "type": "object"
      }, 
      "ResponseOK": {
        "properties": {
          "help": {
            "format": "url", 
            "type": "string"
          }, 
          "result": {
            "type": "object"
          }, 
          "success": {
            "type": "boolean"
          }
        }, 
        "required": [
          "help", 
          "result", 
          "success"
        ], 
        "type": "object"
      }, 
      "Task_Input": {
        "properties": {
          "docker_image": {
            "type": "string"
          }, 
          "input": {
            "items": {
              "type": "string"
            }, 
            "type": "array"
          }, 
          "parameters": {
            "type": "object"
          }, 
          "tags": {
            "type": "object"
          }, 
          "workflow_exec_id": {
            "type": "string"
          }
        }, 
        "required": [
          "docker_image", 
          "input", 
          "parameters", 
          "workflow_exec_id"
        ], 
        "type": "object"
      }, 
      "Task_Track": {
        "properties": {
          "package_id": {
            "type": "string"
          }, 
          "task_exec_id": {
            "type": "string"
          }
        }, 
        "required": [
          "package_id", 
          "task_exec_id"
        ], 
        "type": "object"
      }, 
      "UserRole": {
        "properties": {
          "id": {
            "maxLength": 50, 
            "minLength": 0, 
            "type": "string"
          }, 
          "role": {
            "enum": [
              "admin", 
              "editor", 
              "member"
            ], 
            "type": "string"
          }, 
          "username": {
            "maxLength": 50, 
            "minLength": 0, 
            "type": "string"
          }
        }, 
        "required": [
          "id", 
          "role", 
          "username"
        ], 
        "type": "object"
      }, 
      "ValidationError": {
        "properties": {
          "detail": {
            "properties": {
              "<location>": {
                "properties": {
                  "<field_name>": {
                    "items": {
                      "type": "string"
                    }, 
                    "type": "array"
                  }
                }, 
                "type": "object"
              }
            }, 
            "type": "object"
          }, 
          "message": {
            "type": "string"
          }
        }, 
        "type": "object"
      }, 
      "Workflow_Commit": {
        "properties": {
          "state": {
            "type": "string"
          }, 
          "workflow_exec_id": {
            "type": "string"
          }
        }, 
        "required": [
          "state", 
          "workflow_exec_id"
        ], 
        "type": "object"
      }, 
      "Workflow_Input": {
        "properties": {
          "tags": {
            "type": "object"
          }
        }, 
        "type": "object"
      }
    }, 
    "securitySchemes": {
      "ApiKeyAuth": {
        "in": "header", 
        "name": "Api-Token", 
        "type": "apiKey"
      }
    }
  }, 
  "info": {
    "contact": {
      "email": "info@stelar-project.eu", 
      "name": "API Support", 
      "url": "http://data-api.magellan2.imsi.athenarc.gr/"
    }, 
    "description": "Data API for managing resources in STELAR Knowledge Lake Management System", 
    "license": {
      "name": "Apache 2.0", 
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }, 
    "termsOfService": "http://stelar-project.eu/", 
    "title": "KLMS Data API", 
    "version": "0.0.2"
  }, 
  "openapi": "3.0.3", 
  "paths": {
    "/": {
      "get": {
        "description": "Args:\n\nReturns:\nA JSON with basic information about the API.", 
        "parameters": [], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOK"
                }
              }
            }, 
            "description": "Successful response"
          }, 
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }, 
            "description": "Not Found"
          }
        }, 
        "summary": "Entry point to the Data API of Knowledge Lake Management System.", 
        "tags": [
          "KLMS Data API"
        ]
      }
    }, 
    "/api/v1/artifact": {
      "get": {
        "description": "Provides the path to the file (URL, S3 bucket or local file) where an artifact (stored as a resource) is available. User may need credentials to access this file.\n\nArgs:\nid: The unique identifier of the resource as listed in CKAN.\n\nReturns:\nA JSON with the file path for the specified resource as maintained in CKAN.", 
        "parameters": [
          {
            "in": "query", 
            "name": "id", 
            "required": false, 
            "schema": {
              "example": "6dc36257-abb6-45b5-b3bb-5f94160fc2ee", 
              "maxLength": 64, 
              "minLength": 0, 
              "type": "string"
            }
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOK"
                }
              }
            }, 
            "description": "Successful response"
          }, 
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }, 
            "description": "Validation error"
          }
        }, 
        "summary": "Get the file path of an artifact. ", 
        "tags": [
          "Search Operations"
        ]
      }
    }, 
    "/api/v1/artifact/publish": {
      "post": {
        "description": "If a package id is provided, associate the artifact (with its URL) to this package in CKAN. Otherwise, create a new package in CKAN to make this association. The user will become the publisher of this resource.\n\nArgs:\ndata: A JSON with all metadata information provided by the publisher about the new artifact.\n\nReturns:\nA JSON with the CKAN response to the publishing request.", 
        "parameters": [], 
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "artifact_metadata": {
                  "description": "This is the test artifact uploaded to minio S3 in CSV format", 
                  "format": "CSV", 
                  "name": "Results of deduplication task", 
                  "resource_tags": [
                    "Artifact", 
                    "MLFlow"
                  ], 
                  "task_uuid": "d63a2b507bf6b6eadcb2c8de378c0370", 
                  "url": "s3://mlflow-bucket/16/041d3882c0814e94968135525cbd5aa7/artifacts/20220805_duplicates.csv"
                }, 
                "package_metadata": {
                  "package_id": "test_data_api_1"
                }
              }, 
              "schema": {
                "$ref": "#/components/schemas/Artifact"
              }
            }
          }
        }, 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {}
              }
            }, 
            "description": "Successful response"
          }, 
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }, 
            "description": "Authentication error"
          }, 
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }, 
            "description": "Validation error"
          }
        }, 
        "security": [
          {
            "ApiKeyAuth": []
          }
        ], 
        "summary": "Publish an artifact created by a workflow execution.", 
        "tags": [
          "Publishing Operations"
        ]
      }
    }, 
    "/api/v1/catalog": {
      "get": {
        "description": "Args:\nid: The unique identifier of the dataset as listed in CKAN.\n\nReturns:\nA JSON with all metadata maintained in CKAN for the specified dataset.", 
        "parameters": [
          {
            "in": "query", 
            "name": "id", 
            "required": false, 
            "schema": {
              "example": "6dc36257-abb6-45b5-b3bb-5f94160fc2ee", 
              "maxLength": 64, 
              "minLength": 0, 
              "type": "string"
            }
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOK"
                }
              }
            }, 
            "description": "Successful response"
          }, 
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }, 
            "description": "Validation error"
          }
        }, 
        "summary": "Get all metadata available for a dataset (i.e., CKAN package) that is accessible by the user.", 
        "tags": [
          "Search Operations"
        ]
      }
    }, 
    "/api/v1/catalog/all": {
      "get": {
        "description": "Args:\n\nReturns:\nA JSON with the names of all datasets accessible by the user.", 
        "parameters": [], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {}
              }
            }, 
            "description": "Successful response"
          }
        }, 
        "summary": "List the identifiers of all datasets (packages) maintained in CKAN that are accessible by the user.", 
        "tags": [
          "Search Operations"
        ]
      }
    }, 
    "/api/v1/catalog/facet/values": {
      "post": {
        "description": "Args:\njson_data: A JSON specifying the facet name (corresponding to an SQL view or table) to query in the PostgreSQL database of the Data Catalog.\n\nReturns:\nA JSON with all values available for the specified facet.", 
        "parameters": [], 
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "q": "format"
              }, 
              "schema": {
                "$ref": "#/components/schemas/Filter"
              }
            }
          }
        }, 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOK"
                }
              }
            }, 
            "description": "Successful response"
          }, 
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }, 
            "description": "Authentication error"
          }, 
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }, 
            "description": "Validation error"
          }
        }, 
        "security": [
          {
            "ApiKeyAuth": []
          }
        ], 
        "summary": "Submit a SELECT SQL command to the PostgreSQL database.", 
        "tags": [
          "Search Operations"
        ]
      }
    }, 
    "/api/v1/catalog/publish": {
      "post": {
        "description": "Registers metadata about a dataset and its associated resources (e.g., a data profile) in CKAN. The actual dataset will not be stored in the Catalog. The user will become the publisher of this dataset.\n\nArgs:\ndata: A JSON with metadata information provided by the publisher about the new dataset.\n\nReturns:\nA JSON with the CKAN response to the publishing request.", 
        "parameters": [], 
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "basic_metadata": {
                  "notes": "This dataset contains Points of Interest extracted from OpenStreetMap", 
                  "tags": [
                    "STELAR", 
                    "OpenStreetMap", 
                    "Geospatial", 
                    "Bavaria"
                  ], 
                  "title": "Test Data API 1"
                }, 
                "extra_metadata": {
                  "INSPIRE theme": "Imagery", 
                  "language": [
                    "ca", 
                    "en", 
                    "es"
                  ], 
                  "spatial": {
                    "coordinates": [
                      [
                        [
                          12.362, 
                          45.39
                        ], 
                        [
                          12.485, 
                          45.39
                        ], 
                        [
                          12.485, 
                          45.576
                        ], 
                        [
                          12.362, 
                          45.576
                        ], 
                        [
                          12.362, 
                          45.39
                        ]
                      ]
                    ], 
                    "type": "Polygon"
                  }, 
                  "temporal_end": "2023-01-31T11:35:48.593Z", 
                  "temporal_start": "2023-01-31T11:33:54.132Z", 
                  "theme": [
                    "Earth Sciences", 
                    "Landuse", 
                    "http://eurovoc.europa.eu/4630"
                  ]
                }, 
                "profile_metadata": {
                  "description": "This is the profile of a time series in JSON format", 
                  "format": "JSON", 
                  "name": "Time series profile in JSON", 
                  "resource_tags": [
                    "Profile", 
                    "Computed with STELAR Profiler"
                  ], 
                  "resource_type": "Tabular", 
                  "url": "https://raw.githubusercontent.com/stelar-eu/data-profiler/main/examples/output/timeseries_profile.json"
                }
              }, 
              "schema": {
                "$ref": "#/components/schemas/Dataset"
              }
            }
          }
        }, 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOK"
                }
              }
            }, 
            "description": "Successful response"
          }, 
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }, 
            "description": "Authentication error"
          }, 
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }, 
            "description": "Validation error"
          }
        }, 
        "security": [
          {
            "ApiKeyAuth": []
          }
        ], 
        "summary": "Publish a new dataset in the Catalog.", 
        "tags": [
          "Publishing Operations"
        ]
      }
    }, 
    "/api/v1/catalog/rank": {
      "post": {
        "description": "Args:\njson_data: A JSON with facet preferences for searching in the Data Catalog. Facet name should match a property specified in the STELAR Ontology.\n\nReturns:\nA JSON with datasets ranked by the specified facet(s). The matching score per facet criterion is also listed per returned dataset.", 
        "parameters": [], 
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "rank_preferences": {
                  "language": [
                    "en", 
                    "el", 
                    "fr"
                  ], 
                  "spatial": {
                    "coordinates": [
                      [
                        [
                          12.362, 
                          45.39
                        ], 
                        [
                          12.485, 
                          45.39
                        ], 
                        [
                          12.485, 
                          45.576
                        ], 
                        [
                          12.362, 
                          45.576
                        ], 
                        [
                          12.362, 
                          45.39
                        ]
                      ]
                    ], 
                    "type": "Polygon"
                  }, 
                  "tags": [
                    "Geospatial", 
                    "POI"
                  ], 
                  "theme": [
                    "Land Use", 
                    "Land Cover", 
                    "Imagery"
                  ]
                }, 
                "settings": {
                  "algorithm": "threshold", 
                  "k": 10, 
                  "weights": [
                    0.3, 
                    0.5, 
                    0.4
                  ]
                }
              }, 
              "schema": {
                "$ref": "#/components/schemas/Ranking"
              }
            }
          }
        }, 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOK"
                }
              }
            }, 
            "description": "Successful response"
          }, 
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }, 
            "description": "Authentication error"
          }, 
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }, 
            "description": "Validation error"
          }
        }, 
        "security": [
          {
            "ApiKeyAuth": []
          }
        ], 
        "summary": "Submit a rank request regarding specific metadata attributes (facets) to the Data Catalog.", 
        "tags": [
          "Ranking Operations"
        ]
      }
    }, 
    "/api/v1/catalog/search": {
      "post": {
        "description": "Args:\njson_data: A JSON with filtering criteria for searching in the Data Catalog. Keys should match properties specified in the STELAR Ontology.\n\nReturns:\nA JSON with all metadata available in the Catalog for each dataset qualifying to the filtering criteria and accessible by the user.", 
        "parameters": [], 
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "q": {
                  "INSPIRE theme": "Location", 
                  "Topic": "POI", 
                  "spatial": {
                    "coordinates": [
                      [
                        [
                          12.362, 
                          45.39
                        ], 
                        [
                          12.485, 
                          45.39
                        ], 
                        [
                          12.485, 
                          45.576
                        ], 
                        [
                          12.362, 
                          45.576
                        ], 
                        [
                          12.362, 
                          45.39
                        ]
                      ]
                    ], 
                    "type": "Polygon"
                  }
                }
              }, 
              "schema": {
                "$ref": "#/components/schemas/Query"
              }
            }
          }
        }, 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOK"
                }
              }
            }, 
            "description": "Successful response"
          }, 
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }, 
            "description": "Authentication error"
          }, 
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }, 
            "description": "Validation error"
          }
        }, 
        "security": [
          {
            "ApiKeyAuth": []
          }
        ], 
        "summary": "Submit a search request to the Data Catalog.", 
        "tags": [
          "Search Operations"
        ]
      }
    }, 
    "/api/v1/catalog/sql": {
      "post": {
        "description": "Args:\njson_data: A JSON specifying the SELECT query in SQL for searching the Data Catalog in PostgreSQL. Syntax must follow SQL specifications for PostgreSQL.\n\nReturns:\nA JSON with all results qualifying to the search criteria.", 
        "parameters": [], 
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "q": "SELECT * FROM public.package LIMIT 5"
              }, 
              "schema": {
                "$ref": "#/components/schemas/Filter"
              }
            }
          }
        }, 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOK"
                }
              }
            }, 
            "description": "Successful response"
          }, 
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }, 
            "description": "Authentication error"
          }, 
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }, 
            "description": "Validation error"
          }
        }, 
        "security": [
          {
            "ApiKeyAuth": []
          }
        ], 
        "summary": "Submit a SELECT SQL command to the PostgreSQL database.", 
        "tags": [
          "Search Operations"
        ]
      }
    }, 
    "/api/v1/catalog/tags": {
      "get": {
        "description": "Args:\n\nReturns:\nA JSON with all available tags.", 
        "parameters": [], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {}
              }
            }, 
            "description": "Successful response"
          }
        }, 
        "summary": "List all tags associated with datasets (packages) maintained in CKAN.", 
        "tags": [
          "Search Operations"
        ]
      }
    }, 
    "/api/v1/catalog/user/create": {
      "post": {
        "description": "Args:\ndata: A JSON with user metadata.\n\nReturns:\nA JSON with the response to this request.", 
        "parameters": [], 
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "about": "Testing the CKAN API for creating another new user", 
                "email": "test5@example.com", 
                "fullname": "Jane Doe", 
                "image_url": "https://commons.wikimedia.org/wiki/File:Example.jpg", 
                "name": "test_user5", 
                "password": "test_pass5"
              }, 
              "schema": {
                "$ref": "#/components/schemas/NewUser"
              }
            }
          }
        }, 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOK"
                }
              }
            }, 
            "description": "Successful response"
          }, 
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }, 
            "description": "Authentication error"
          }, 
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }, 
            "description": "Validation error"
          }
        }, 
        "security": [
          {
            "ApiKeyAuth": []
          }
        ], 
        "summary": "Create a new user in CKAN. Requires admin role in CKAN to create new users.", 
        "tags": [
          "User Management"
        ]
      }
    }, 
    "/api/v1/catalog/user/delete": {
      "post": {
        "description": "Args:\ndata: A JSON with user's id or username.\n\nReturns:\nA JSON with the response to this request.", 
        "parameters": [], 
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "id": "02568a6c-9970-4650-87d7-26d4f7d64fd6"
              }, 
              "schema": {
                "$ref": "#/components/schemas/Identifier"
              }
            }
          }
        }, 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOK"
                }
              }
            }, 
            "description": "Successful response"
          }, 
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }, 
            "description": "Authentication error"
          }, 
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }, 
            "description": "Validation error"
          }
        }, 
        "security": [
          {
            "ApiKeyAuth": []
          }
        ], 
        "summary": "Delete an existing user from CKAN. Requires admin role in CKAN for performing deletions.", 
        "tags": [
          "User Management"
        ]
      }
    }, 
    "/api/v1/catalog/user/organization": {
      "get": {
        "description": "Args:\nid (string): The id of the user in CKAN.\n\nReturns:\nThe organization(s) where this user has been assigned a role.", 
        "parameters": [
          {
            "in": "query", 
            "name": "id", 
            "required": false, 
            "schema": {
              "example": "6dc36257-abb6-45b5-b3bb-5f94160fc2ee", 
              "maxLength": 64, 
              "minLength": 0, 
              "type": "string"
            }
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {}
              }
            }, 
            "description": "Successful response"
          }, 
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }, 
            "description": "Validation error"
          }
        }, 
        "summary": "Finds the organization(s) where the given user is assigned a role (admin/editor/member) in CKAN.", 
        "tags": [
          "User Management"
        ]
      }, 
      "post": {
        "description": "Args:\nNone; it assumes the user corresponding to the specified API Token.\n\nReturns:\nThe organization(s) where this user has been assigned a role.", 
        "parameters": [], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {}
              }
            }, 
            "description": "Successful response"
          }, 
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }, 
            "description": "Authentication error"
          }
        }, 
        "security": [
          {
            "ApiKeyAuth": []
          }
        ], 
        "summary": "Finds the organization(s) where the given user is assigned a role (admin/editor/member) in CKAN.", 
        "tags": [
          "User Management"
        ]
      }
    }, 
    "/api/v1/catalog/user/role/assign": {
      "post": {
        "description": "Args:\ndata: A JSON with user metadata. Must include the id of the organization, the user id, and the role to be assigned (member/editor/admin).\n\nReturns:\nA JSON with the response to this request.", 
        "parameters": [], 
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "id": "athenarc", 
                "role": "editor", 
                "username": "02568a6c-9970-4650-87d7-26d4f7d64fd6"
              }, 
              "schema": {
                "$ref": "#/components/schemas/UserRole"
              }
            }
          }
        }, 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOK"
                }
              }
            }, 
            "description": "Successful response"
          }, 
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }, 
            "description": "Authentication error"
          }, 
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }, 
            "description": "Validation error"
          }
        }, 
        "security": [
          {
            "ApiKeyAuth": []
          }
        ], 
        "summary": "Assign a role for an existing user as a member of an organization in CKAN. Requires admin role in CKAN for such assignments.", 
        "tags": [
          "User Management"
        ]
      }
    }, 
    "/api/v1/catalog/user/token/create": {
      "post": {
        "description": "Args:\ndata: A JSON with user identifier (or name) and the name to be given to the new token.\n\nReturns:\nA JSON with the response to this request, containing the generated API token.", 
        "parameters": [], 
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "name": "test5_API_token", 
                "user": "test_user5"
              }, 
              "schema": {
                "$ref": "#/components/schemas/NewToken"
              }
            }
          }
        }, 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOK"
                }
              }
            }, 
            "description": "Successful response"
          }, 
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }, 
            "description": "Authentication error"
          }, 
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }, 
            "description": "Validation error"
          }
        }, 
        "security": [
          {
            "ApiKeyAuth": []
          }
        ], 
        "summary": "Generate an API token for an existing user in CKAN. Requires authentication of the user in CKAN to generate a token.", 
        "tags": [
          "User Management"
        ]
      }
    }, 
    "/api/v1/catalog/user/update": {
      "post": {
        "description": "Args:\ndata: A JSON specifying changes in user's metadata.\n\nReturns:\nA JSON with the response to this request.", 
        "parameters": [], 
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "about": "Testing the CKAN API for patching information about an existing user", 
                "id": "02568a6c-9970-4650-87d7-26d4f7d64fd6", 
                "image_url": "https://commons.wikimedia.org/wiki/File:JPEG_example_flower.jpg"
              }, 
              "schema": {
                "$ref": "#/components/schemas/ChangedUser"
              }
            }
          }
        }, 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOK"
                }
              }
            }, 
            "description": "Successful response"
          }, 
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }, 
            "description": "Authentication error"
          }, 
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }, 
            "description": "Validation error"
          }
        }, 
        "security": [
          {
            "ApiKeyAuth": []
          }
        ], 
        "summary": "Update (patch) information an existing user in CKAN. Requires admin role in CKAN for such updates.", 
        "tags": [
          "User Management"
        ]
      }
    }, 
    "/api/v1/catalog/vocabularies": {
      "get": {
        "description": "Args:\n\nReturns:\nA JSON with all available vocabularies.", 
        "parameters": [], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {}
              }
            }, 
            "description": "Successful response"
          }
        }, 
        "summary": "List all vocabularies employed in metadata for datasets (packages) maintained in CKAN.", 
        "tags": [
          "Search Operations"
        ]
      }
    }, 
    "/api/v1/dataset/delete": {
      "post": {
        "description": "Completely removes the metadata and any associated resources (e.g., profiles) of an existing dataset from the CKAN database. The user must have admin role in order to delete datasets.\n\nArgs:\ndata: A JSON with the id of an existing dataset.\n\nReturns:\nA JSON with the CKAN response to the delete request.", 
        "parameters": [], 
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "id": "test_data_api_1"
              }, 
              "schema": {
                "$ref": "#/components/schemas/Identifier"
              }
            }
          }
        }, 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOK"
                }
              }
            }, 
            "description": "Successful response"
          }, 
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }, 
            "description": "Authentication error"
          }, 
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }, 
            "description": "Validation error"
          }
        }, 
        "security": [
          {
            "ApiKeyAuth": []
          }
        ], 
        "summary": "Delete an existing dataset from the Catalog.", 
        "tags": [
          "Catalog Management"
        ]
      }
    }, 
    "/api/v1/dataset/export_zenodo": {
      "get": {
        "description": "Args:\nid: The unique identifier of the dataset as listed in CKAN.\n\nReturns:\nA JSON with metadata compliant with DataCite's Metadata Schema employed by Zenodo.", 
        "parameters": [
          {
            "in": "query", 
            "name": "id", 
            "required": false, 
            "schema": {
              "example": "6dc36257-abb6-45b5-b3bb-5f94160fc2ee", 
              "maxLength": 64, 
              "minLength": 0, 
              "type": "string"
            }
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOK"
                }
              }
            }, 
            "description": "Successful response"
          }, 
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }, 
            "description": "Validation error"
          }
        }, 
        "summary": "Export all metadata available for a dataset (i.e., CKAN package) in order to published to Zenodo.", 
        "tags": [
          "Search Operations"
        ]
      }
    }, 
    "/api/v1/dataset/patch": {
      "post": {
        "description": "Args:\ndata: A JSON with additional metadata information provided by the publisher about the new dataset.\n\nReturns:\nA JSON with the CKAN response to the patch request.", 
        "parameters": [], 
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "package_metadata": {
                  "extras": [
                    {
                      "key": "custom_tags", 
                      "value": "http://www.w3.org/ns/dcat#Dataset"
                    }, 
                    {
                      "key": "INSPIRE theme", 
                      "value": "Location"
                    }, 
                    {
                      "key": "Topic", 
                      "value": "POI"
                    }
                  ], 
                  "id": "test_data_api_1", 
                  "tags": [
                    {
                      "name": "Patch"
                    }
                  ]
                }
              }, 
              "schema": {
                "$ref": "#/components/schemas/Package"
              }
            }
          }
        }, 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOK"
                }
              }
            }, 
            "description": "Successful response"
          }, 
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }, 
            "description": "Authentication error"
          }, 
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }, 
            "description": "Validation error"
          }
        }, 
        "security": [
          {
            "ApiKeyAuth": []
          }
        ], 
        "summary": "Patch more metadata to an existing dataset according to CKAN specifications. The user will become the publisher of this dataset.", 
        "tags": [
          "Publishing Operations"
        ]
      }
    }, 
    "/api/v1/dataset/register": {
      "post": {
        "description": "Args:\ndata: A JSON with basic metadata information (as required by CKAN) provided by the publisher about the new dataset.\n\nReturns:\nA JSON with the CKAN response to the registration request.", 
        "parameters": [], 
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "package_metadata": {
                  "extras": [
                    {
                      "key": "custom_tags", 
                      "value": "http://www.w3.org/ns/dcat#Dataset"
                    }, 
                    {
                      "key": "INSPIRE theme", 
                      "value": "Location"
                    }, 
                    {
                      "key": "Topic", 
                      "value": "POI"
                    }
                  ], 
                  "name": "test_data_api_1", 
                  "notes": "This dataset contains Points of Interest extracted from OpenStreetMap", 
                  "owner_org": "athenarc", 
                  "private": "false", 
                  "tags": [
                    {
                      "name": "STELAR"
                    }, 
                    {
                      "name": "OpenStreetMap"
                    }, 
                    {
                      "name": "Geospatial"
                    }, 
                    {
                      "name": "Berlin"
                    }
                  ], 
                  "title": "Test Data API 1", 
                  "version": "0.3"
                }
              }, 
              "schema": {
                "$ref": "#/components/schemas/Package"
              }
            }
          }
        }, 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOK"
                }
              }
            }, 
            "description": "Successful response"
          }, 
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }, 
            "description": "Authentication error"
          }, 
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }, 
            "description": "Validation error"
          }
        }, 
        "security": [
          {
            "ApiKeyAuth": []
          }
        ], 
        "summary": "Register a new dataset according to CKAN specifications. The user will become the publisher of this dataset.", 
        "tags": [
          "Publishing Operations"
        ]
      }
    }, 
    "/api/v1/dataset/search": {
      "get": {
        "description": "Args:\nq: Filtering criteria for searching in CKAN. Search may concern either metadata values (?q=) or facets (?fc=) or spatial extents (?ext_bbox=) only. One argument (?q= or ?fq= or ?ext_bbox) must be specified per request. Syntax must follow <a href=\"https://docs.ckan.org/en/latest/api/#ckan.logic.action.get.package_search\">SOLR specifications for filtering</a>.\n\nReturns:\nA JSON with all metadata available in CKAN for each dataset qualifying to the filtering criteria and accessible by the user.", 
        "parameters": [
          {
            "in": "query", 
            "name": "q", 
            "required": false, 
            "schema": {
              "example": "Topic:*Hydrography*&ext_bbox=20,35,30,42", 
              "type": "string"
            }
          }, 
          {
            "in": "query", 
            "name": "ext_bbox", 
            "required": false, 
            "schema": {
              "example": "20,35,30,42", 
              "type": "string"
            }
          }, 
          {
            "in": "query", 
            "name": "fq", 
            "required": false, 
            "schema": {
              "example": "organization:athenarc", 
              "type": "string"
            }
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOK"
                }
              }
            }, 
            "description": "Successful response"
          }, 
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }, 
            "description": "Validation error"
          }
        }, 
        "summary": "Submit a search request against CKAN packages (datasets).", 
        "tags": [
          "Search Operations"
        ]
      }
    }, 
    "/api/v1/dataset/unpublish": {
      "post": {
        "description": "Marks an existing dataset as inactive in CKAN. The package remains in the CKAN database with \"deleted\" status, but does not appear in the GUI and is not included in search results.\n\nArgs:\ndata: A JSON with the id of an existing dataset.\n\nReturns:\nA JSON with the CKAN response to the unpublish request.", 
        "parameters": [], 
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "id": "test_data_api_1"
              }, 
              "schema": {
                "$ref": "#/components/schemas/Identifier"
              }
            }
          }
        }, 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOK"
                }
              }
            }, 
            "description": "Successful response"
          }, 
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }, 
            "description": "Authentication error"
          }, 
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }, 
            "description": "Validation error"
          }
        }, 
        "security": [
          {
            "ApiKeyAuth": []
          }
        ], 
        "summary": "Unpublish an existing dataset from the Catalog.", 
        "tags": [
          "Catalog Management"
        ]
      }
    }, 
    "/api/v1/graph/search": {
      "post": {
        "description": "Args:\njson_data: A JSON specifying the SELECT query in SPARQL for searching the Knowledge Graph via Ontop. Syntax must follow SPARQL specifications for Ontop.\n\nReturns:\nA JSON with all RDF triples qualifying to the search criteria.", 
        "parameters": [], 
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "q": "PREFIX dct: <http://purl.org/dc/terms/> SELECT ?uri ?title ?publisher WHERE { ?uri dct:title ?title . ?uri dct:publisher ?publisher . } LIMIT 5"
              }, 
              "schema": {
                "$ref": "#/components/schemas/Filter"
              }
            }
          }
        }, 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {}
              }
            }, 
            "description": "Successful response"
          }, 
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }, 
            "description": "Authentication error"
          }, 
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }, 
            "description": "Validation error"
          }
        }, 
        "security": [
          {
            "ApiKeyAuth": []
          }
        ], 
        "summary": "Submit a search request to the SPARQL endpoint.", 
        "tags": [
          "Search Operations"
        ]
      }
    }, 
    "/api/v1/profile/publish": {
      "post": {
        "description": "Args:\ndata: A JSON with all metadata information provided by the publisher about the profile.\n\nReturns:\nA JSON with the CKAN response to the publishing request.", 
        "parameters": [], 
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "profile_metadata": {
                  "description": "This is the profile of the Leaf Area Index in JSON format", 
                  "file": "/data/examples/single_field_LAI-2.json", 
                  "format": "JSON", 
                  "name": "LAI profile in JSON", 
                  "package_id": "test_data_api_1", 
                  "resource_tags": [
                    "Profile", 
                    "Computed with STELAR Profiler"
                  ], 
                  "resource_type": "Raster"
                }
              }, 
              "schema": {
                "$ref": "#/components/schemas/Profile"
              }
            }
          }
        }, 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOK"
                }
              }
            }, 
            "description": "Successful response"
          }, 
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }, 
            "description": "Authentication error"
          }, 
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }, 
            "description": "Validation error"
          }
        }, 
        "security": [
          {
            "ApiKeyAuth": []
          }
        ], 
        "summary": "Upload a profile as a resource to an existing dataset in CKAN. The user will become the publisher of this profile.", 
        "tags": [
          "Publishing Operations"
        ]
      }
    }, 
    "/api/v1/resource": {
      "get": {
        "description": "Args:\nid: The unique identifier of the resource as listed in CKAN.\n\nReturns:\nA JSON with all metadata maintained in CKAN for the specified resource.", 
        "parameters": [
          {
            "in": "query", 
            "name": "id", 
            "required": false, 
            "schema": {
              "example": "6dc36257-abb6-45b5-b3bb-5f94160fc2ee", 
              "maxLength": 64, 
              "minLength": 0, 
              "type": "string"
            }
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOK"
                }
              }
            }, 
            "description": "Successful response"
          }, 
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }, 
            "description": "Validation error"
          }
        }, 
        "summary": "Get all metadata available for a resource that is accessible by the user.", 
        "tags": [
          "Search Operations"
        ]
      }
    }, 
    "/api/v1/resource/delete": {
      "post": {
        "description": "Completely removes a resource (e.g., profile) associated with an existing dataset from the CKAN database. The user must have admin role or must be the publisher of this resource.\n\nArgs:\ndata: A JSON with the id of an existing resource.\n\nReturns:\nA JSON with the CKAN response to the delete request.", 
        "parameters": [], 
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "id": "aa2992aa-b589-463d-ae1e-8430d91206cb"
              }, 
              "schema": {
                "$ref": "#/components/schemas/Identifier"
              }
            }
          }
        }, 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOK"
                }
              }
            }, 
            "description": "Successful response"
          }, 
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }, 
            "description": "Authentication error"
          }, 
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }, 
            "description": "Validation error"
          }
        }, 
        "security": [
          {
            "ApiKeyAuth": []
          }
        ], 
        "summary": "Delete an existing resource from the Catalog.", 
        "tags": [
          "Catalog Management"
        ]
      }
    }, 
    "/api/v1/resource/link": {
      "post": {
        "description": "Args:\ndata: A JSON with all metadata information provided by the publisher about the new resource.\n\nReturns:\nA JSON with the CKAN response to the publishing request.", 
        "parameters": [], 
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "resource_metadata": {
                  "description": "This is the test resource in GeoJSON format", 
                  "format": "GeoJSON", 
                  "name": "Test GeoJSON resource", 
                  "package_id": "test_data_api_1", 
                  "resource_tags": [
                    "Link to external resource", 
                    "Found in the Web"
                  ], 
                  "resource_type": "Tabular", 
                  "url": "https://data.smartdublin.ie/dataset/09870e46-26a3-4dc2-b632-4d1fba5092f9/resource/40a718a8-cb99-468d-962b-af4fed4b0def/download/bleeperbike_map.geojson"
                }
              }, 
              "schema": {
                "$ref": "#/components/schemas/Resource"
              }
            }
          }
        }, 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOK"
                }
              }
            }, 
            "description": "Successful response"
          }, 
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }, 
            "description": "Authentication error"
          }, 
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }, 
            "description": "Validation error"
          }
        }, 
        "security": [
          {
            "ApiKeyAuth": []
          }
        ], 
        "summary": "Associate a resource (with its URL) to an existing dataset in CKAN. The user will become the publisher of this resource.", 
        "tags": [
          "Publishing Operations"
        ]
      }
    }, 
    "/api/v1/resource/search": {
      "get": {
        "description": "Args:\nq: Filtering criteria for searching in CKAN. Syntax must follow SOLR specifications for filtering. https://docs.ckan.org/en/latest/api/#ckan.logic.action.get.resource_search\n\nReturns:\nA JSON with all metadata available in CKAN for each dataset qualifying to the filtering criteria and accessible by the user.", 
        "parameters": [
          {
            "in": "query", 
            "name": "q", 
            "required": false, 
            "schema": {
              "example": "format:JSON", 
              "type": "string"
            }
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOK"
                }
              }
            }, 
            "description": "Successful response"
          }, 
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }, 
            "description": "Validation error"
          }
        }, 
        "summary": "Submit a request to search among the CKAN resources accessible by the user.", 
        "tags": [
          "Search Operations"
        ]
      }
    }, 
    "/api/v1/resource/upload": {
      "post": {
        "description": "Args:\ndata: A JSON with all metadata information provided by the publisher about the new resource.\n\nReturns:\nA JSON with the CKAN response to the publishing request.", 
        "parameters": [], 
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "resource_metadata": {
                  "description": "This is the profile of the Leaf Area Index in JSON format", 
                  "file": "/data/examples/single_field_LAI-2.json", 
                  "format": "JSON", 
                  "name": "LAI profile in JSON", 
                  "package_id": "test_data_api_1", 
                  "resource_tags": [
                    "Profile", 
                    "Computed with STELAR Profiler"
                  ]
                }
              }, 
              "schema": {
                "$ref": "#/components/schemas/Resource"
              }
            }
          }
        }, 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOK"
                }
              }
            }, 
            "description": "Successful response"
          }, 
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }, 
            "description": "Authentication error"
          }, 
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }, 
            "description": "Validation error"
          }
        }, 
        "security": [
          {
            "ApiKeyAuth": []
          }
        ], 
        "summary": "Upload a resource to an existing dataset according to CKAN specifications. The user will become the publisher of this resource.", 
        "tags": [
          "Publishing Operations"
        ]
      }
    }, 
    "/api/v1/task/execution/create": {
      "post": {
        "description": "parameters.\n\nArgs:\ndata: A JSON with the ID of the Workflow Execution, the docker image to run\nand the corresponding input to the tool.\n\nReturns:\nA JSON with the Minio response to the uploading request.", 
        "parameters": [], 
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "docker_image": "alzeakis/pytokenjoin:v3", 
                "input": [
                  "0059004a-67b8-4445-b9d6-5b0475784c49", 
                  "2350a24b-87af-4505-aafb-72a15e0c118c"
                ], 
                "parameters": {
                  "col_id_left": 1, 
                  "col_id_right": 0, 
                  "col_text_left": 2, 
                  "col_text_right": 1, 
                  "delta_alg": "1", 
                  "foreign": "foreign", 
                  "k": 1, 
                  "method": "knn", 
                  "output_file": "out.csv", 
                  "separator_left": " ", 
                  "separator_right": " ", 
                  "similarity": "jaccard"
                }, 
                "tags": {}, 
                "workflow_exec_id": "24a976c4-fd84-47ef-92cc-5d5582bcaf41"
              }, 
              "schema": {
                "$ref": "#/components/schemas/Task_Input"
              }
            }
          }
        }, 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {}
              }
            }, 
            "description": "Successful response"
          }, 
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }, 
            "description": "Authentication error"
          }, 
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }, 
            "description": "Validation error"
          }
        }, 
        "security": [
          {
            "ApiKeyAuth": []
          }
        ], 
        "summary": "Create a Task Execution that will run a docker image with the provided", 
        "tags": [
          "Tracking Operations"
        ]
      }
    }, 
    "/api/v1/task/execution/delete": {
      "get": {
        "description": "Args:\nid: The unique identifier of the Task Exection.\n\nReturns:\nA JSON with the corresponding message.", 
        "parameters": [
          {
            "in": "query", 
            "name": "id", 
            "required": false, 
            "schema": {
              "example": "6dc36257-abb6-45b5-b3bb-5f94160fc2ee", 
              "maxLength": 64, 
              "minLength": 0, 
              "type": "string"
            }
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {}
              }
            }, 
            "description": "Successful response"
          }, 
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }, 
            "description": "Authentication error"
          }, 
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }, 
            "description": "Validation error"
          }
        }, 
        "security": [
          {
            "ApiKeyAuth": []
          }
        ], 
        "summary": "Delete the given Task Execution id.", 
        "tags": [
          "Tracking Operations"
        ]
      }
    }, 
    "/api/v1/task/execution/input": {
      "get": {
        "description": "Args:\nid: The identifier (UUID) assigned to the task execution in MLFlow.\n\nReturns:\nA JSON with the list of dataset identifiers (CKAN resources) collected in MLFlow for the specified task execution.", 
        "parameters": [
          {
            "in": "query", 
            "name": "id", 
            "required": false, 
            "schema": {
              "example": "6dc36257-abb6-45b5-b3bb-5f94160fc2ee", 
              "maxLength": 64, 
              "minLength": 0, 
              "type": "string"
            }
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOK"
                }
              }
            }, 
            "description": "Successful response"
          }, 
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }, 
            "description": "Validation error"
          }
        }, 
        "summary": "Submit a request to the Knowledge Graph to retrieve the identifiers of dataset(s) given as input to the specified task execution.", 
        "tags": [
          "Search Operations"
        ]
      }
    }, 
    "/api/v1/task/execution/metrics": {
      "get": {
        "description": "Args:\nid: The identifier (UUID) assigned to the task execution in MLFlow.\n\nReturns:\nA JSON with the metrics collected in MLFlow for the specified task execution.", 
        "parameters": [
          {
            "in": "query", 
            "name": "id", 
            "required": false, 
            "schema": {
              "example": "6dc36257-abb6-45b5-b3bb-5f94160fc2ee", 
              "maxLength": 64, 
              "minLength": 0, 
              "type": "string"
            }
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOK"
                }
              }
            }, 
            "description": "Successful response"
          }, 
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }, 
            "description": "Validation error"
          }
        }, 
        "summary": "Submit a request to the Knowledge Graph retrieve the metrics issued for the specified task execution.", 
        "tags": [
          "Search Operations"
        ]
      }
    }, 
    "/api/v1/task/execution/output": {
      "get": {
        "description": "Args:\nid: The identifier (UUID) assigned to the task execution in MLFlow.\n\nReturns:\nA JSON with the list of dataset identifiers (CKAN resources) collected as output in MLFlow for the specified task execution.", 
        "parameters": [
          {
            "in": "query", 
            "name": "id", 
            "required": false, 
            "schema": {
              "example": "6dc36257-abb6-45b5-b3bb-5f94160fc2ee", 
              "maxLength": 64, 
              "minLength": 0, 
              "type": "string"
            }
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOK"
                }
              }
            }, 
            "description": "Successful response"
          }, 
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }, 
            "description": "Validation error"
          }
        }, 
        "summary": "Submit a request to the Knowledge Graph to retrieve the identifiers of dataset(s) issued as output from the specified task execution.", 
        "tags": [
          "Search Operations"
        ]
      }
    }, 
    "/api/v1/task/execution/parameters": {
      "get": {
        "description": "Args:\nid: The identifier (UUID) assigned to the task execution in MLFlow.\n\nReturns:\nA JSON with the parameters specified in MLFlow for the specified task execution.", 
        "parameters": [
          {
            "in": "query", 
            "name": "id", 
            "required": false, 
            "schema": {
              "example": "6dc36257-abb6-45b5-b3bb-5f94160fc2ee", 
              "maxLength": 64, 
              "minLength": 0, 
              "type": "string"
            }
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOK"
                }
              }
            }, 
            "description": "Successful response"
          }, 
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }, 
            "description": "Validation error"
          }
        }, 
        "summary": "Submit a request to the Knowledge Graph retrieve the parameters specified for the task execution.", 
        "tags": [
          "Search Operations"
        ]
      }
    }, 
    "/api/v1/task/execution/track": {
      "post": {
        "description": "the metrics and output files in the Data Catalog.\n\nArgs:\nid: The unique identifier of the Task Exection.\npackage_id: The unique identifier of the Package ID in the Data Catalog,\nunder which it will store the output files.\n\nReturns:\nA JSON with the task execution metadata, the metrics and the ids of the\noutputfiles in the Data Catalog.", 
        "parameters": [], 
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "package_id": "0f55380a-78ff-413e-9a99-3d214766f563", 
                "task_exec_id": "4a142419-2342-4495-bfa3-9b4b3c2cad2a"
              }, 
              "schema": {
                "$ref": "#/components/schemas/Task_Track"
              }
            }
          }
        }, 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {}
              }
            }, 
            "description": "Successful response"
          }, 
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }, 
            "description": "Authentication error"
          }, 
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }, 
            "description": "Validation error"
          }
        }, 
        "security": [
          {
            "ApiKeyAuth": []
          }
        ], 
        "summary": "Track the execution of a specific task and if it is done, it returns", 
        "tags": [
          "Tracking Operations"
        ]
      }
    }, 
    "/api/v1/task/executions": {
      "get": {
        "description": "Args:\nid: The identifier assigned to the task in MLFlow.\n\nReturns:\nA JSON with the details of the task executions.", 
        "parameters": [
          {
            "in": "query", 
            "name": "id", 
            "required": false, 
            "schema": {
              "example": "6dc36257-abb6-45b5-b3bb-5f94160fc2ee", 
              "maxLength": 64, 
              "minLength": 0, 
              "type": "string"
            }
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOK"
                }
              }
            }, 
            "description": "Successful response"
          }, 
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }, 
            "description": "Validation error"
          }
        }, 
        "summary": "Submit a request to the Knowledge Graph to retrieve the executions performed for the given task.", 
        "tags": [
          "Search Operations"
        ]
      }
    }, 
    "/api/v1/user": {
      "get": {
        "description": "Args:\nid: The unique identifier or account name of the user as listed in CKAN.\n\nReturns:\nA JSON with metadata maintained in CKAN for the specified user.", 
        "parameters": [
          {
            "in": "query", 
            "name": "id", 
            "required": false, 
            "schema": {
              "example": "6dc36257-abb6-45b5-b3bb-5f94160fc2ee", 
              "maxLength": 64, 
              "minLength": 0, 
              "type": "string"
            }
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOK"
                }
              }
            }, 
            "description": "Successful response"
          }, 
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }, 
            "description": "Validation error"
          }
        }, 
        "summary": "Get all metadata publicly available for the user (excluding password and tokens).", 
        "tags": [
          "User Management"
        ]
      }
    }, 
    "/api/v1/workflow/execution/commit": {
      "post": {
        "description": "Args:\ndata: A JSON with the id of the Worfklow Execution and the state of the task.\n\nReturns:\nA JSON with the result of the update.", 
        "parameters": [], 
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "state": "succeeded", 
                "workflow_exec_id": "24a976c4-fd84-47ef-92cc-5d5582bcaf41"
              }, 
              "schema": {
                "$ref": "#/components/schemas/Workflow_Commit"
              }
            }
          }
        }, 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {}
              }
            }, 
            "description": "Successful response"
          }, 
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }, 
            "description": "Authentication error"
          }, 
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }, 
            "description": "Validation error"
          }
        }, 
        "security": [
          {
            "ApiKeyAuth": []
          }
        ], 
        "summary": "Store the results of the Workflow Execution.", 
        "tags": [
          "Tracking Operations"
        ]
      }
    }, 
    "/api/v1/workflow/execution/create": {
      "post": {
        "description": "Args:\ndata: A JSON with the ID of the Workflow and the tags to add.\n\nReturns:\nA JSON with the Workflow Execution ID.", 
        "parameters": [], 
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "tags": {}
              }, 
              "schema": {
                "$ref": "#/components/schemas/Workflow_Input"
              }
            }
          }
        }, 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {}
              }
            }, 
            "description": "Successful response"
          }, 
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }, 
            "description": "Authentication error"
          }, 
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }, 
            "description": "Validation error"
          }
        }, 
        "security": [
          {
            "ApiKeyAuth": []
          }
        ], 
        "summary": "Create a Workflow Execution under a specific defined workflow.", 
        "tags": [
          "Tracking Operations"
        ]
      }
    }, 
    "/api/v1/workflow/execution/delete": {
      "get": {
        "description": "Args:\nid: The unique identifier of the Worfklow Exection.\n\nReturns:\nA JSON with the corresponding message.", 
        "parameters": [
          {
            "in": "query", 
            "name": "id", 
            "required": false, 
            "schema": {
              "example": "6dc36257-abb6-45b5-b3bb-5f94160fc2ee", 
              "maxLength": 64, 
              "minLength": 0, 
              "type": "string"
            }
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {}
              }
            }, 
            "description": "Successful response"
          }, 
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }, 
            "description": "Authentication error"
          }, 
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }, 
            "description": "Validation error"
          }
        }, 
        "security": [
          {
            "ApiKeyAuth": []
          }
        ], 
        "summary": "Delete the given Workflow Execution id.", 
        "tags": [
          "Tracking Operations"
        ]
      }
    }, 
    "/api/v1/workflow/execution/read": {
      "get": {
        "description": "Args:\nid: The unique identifier of the Workflow Exection.\n\nReturns:\nA JSON with the required metadata.", 
        "parameters": [
          {
            "in": "query", 
            "name": "id", 
            "required": false, 
            "schema": {
              "example": "6dc36257-abb6-45b5-b3bb-5f94160fc2ee", 
              "maxLength": 64, 
              "minLength": 0, 
              "type": "string"
            }
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {}
              }
            }, 
            "description": "Successful response"
          }, 
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }, 
            "description": "Authentication error"
          }, 
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }, 
            "description": "Validation error"
          }
        }, 
        "security": [
          {
            "ApiKeyAuth": []
          }
        ], 
        "summary": "Return the metadata of the given Workflow Execution id.", 
        "tags": [
          "Tracking Operations"
        ]
      }
    }, 
    "/api/v1/workflow/input/dataset": {
      "get": {
        "description": "Args:\nid: The identifier (UUID) assigned to the dataset by the Catalog (CKAN).\n\nReturns:\nA JSON with metadata about the workflow(s) where this dataset has been given as input.", 
        "parameters": [
          {
            "in": "query", 
            "name": "id", 
            "required": false, 
            "schema": {
              "example": "6dc36257-abb6-45b5-b3bb-5f94160fc2ee", 
              "maxLength": 64, 
              "minLength": 0, 
              "type": "string"
            }
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOK"
                }
              }
            }, 
            "description": "Successful response"
          }, 
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }, 
            "description": "Validation error"
          }
        }, 
        "summary": "Submit a request to identify in which workflow(s) a dataset (CKAN package) has been given as input to any of the involved tasks.", 
        "tags": [
          "Search Operations"
        ]
      }
    }, 
    "/api/v1/workflow/input/resource": {
      "get": {
        "description": "Args:\nid: The identifier (UUID) assigned to the resource by the Catalog (CKAN).\n\nReturns:\nA JSON with metadata about the workflow(s) where this file has been given as input.", 
        "parameters": [
          {
            "in": "query", 
            "name": "id", 
            "required": false, 
            "schema": {
              "example": "6dc36257-abb6-45b5-b3bb-5f94160fc2ee", 
              "maxLength": 64, 
              "minLength": 0, 
              "type": "string"
            }
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOK"
                }
              }
            }, 
            "description": "Successful response"
          }, 
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }, 
            "description": "Validation error"
          }
        }, 
        "summary": "Submit a request to identify in which workflow(s) a file (CKAN resource) has been given as input to any of the involved tasks.", 
        "tags": [
          "Search Operations"
        ]
      }
    }, 
    "/api/v1/workflow/output/dataset": {
      "get": {
        "description": "Args:\nid: The identifier (UUID) assigned to the dataset by the Catalog (CKAN).\n\nReturns:\nA JSON with metadata about the workflow(s) where this dataset has been issued as output.", 
        "parameters": [
          {
            "in": "query", 
            "name": "id", 
            "required": false, 
            "schema": {
              "example": "6dc36257-abb6-45b5-b3bb-5f94160fc2ee", 
              "maxLength": 64, 
              "minLength": 0, 
              "type": "string"
            }
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOK"
                }
              }
            }, 
            "description": "Successful response"
          }, 
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }, 
            "description": "Validation error"
          }
        }, 
        "summary": "Submit a request to identify in which workflow(s) the given dataset (CKAN package) has been issued as output in any of the involved tasks.", 
        "tags": [
          "Search Operations"
        ]
      }
    }, 
    "/api/v1/workflow/output/resource": {
      "get": {
        "description": "Args:\nid: The identifier (UUID) assigned to the resource by the Catalog (CKAN).\n\nReturns:\nA JSON with metadata about the workflow(s) where this file has been issued as output.", 
        "parameters": [
          {
            "in": "query", 
            "name": "id", 
            "required": false, 
            "schema": {
              "example": "6dc36257-abb6-45b5-b3bb-5f94160fc2ee", 
              "maxLength": 64, 
              "minLength": 0, 
              "type": "string"
            }
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOK"
                }
              }
            }, 
            "description": "Successful response"
          }, 
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }, 
            "description": "Validation error"
          }
        }, 
        "summary": "Submit a request to identify in which workflow(s) the given file (CKAN resource) has been issued as output in any of the involved tasks.", 
        "tags": [
          "Search Operations"
        ]
      }
    }, 
    "/api/v1/workflow/publish": {
      "post": {
        "description": "Args:\ndata: A JSON with basic metadata information (as required by CKAN) provided by the publisher about the new workflow.\n\nReturns:\nA JSON with the CKAN response to the publishing request.", 
        "parameters": [], 
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "package_metadata": {
                  "notes": "This workflow performs entity matching", 
                  "tags": [
                    "STELAR", 
                    "Entity matching", 
                    "Entity resolution"
                  ], 
                  "title": "Test workflow"
                }
              }, 
              "schema": {
                "$ref": "#/components/schemas/Package"
              }
            }
          }
        }, 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOK"
                }
              }
            }, 
            "description": "Successful response"
          }, 
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }, 
            "description": "Authentication error"
          }, 
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }, 
            "description": "Validation error"
          }
        }, 
        "security": [
          {
            "ApiKeyAuth": []
          }
        ], 
        "summary": "Publish a new workflow as a CKAN package. The user will become the publisher of this workflow.", 
        "tags": [
          "Publishing Operations"
        ]
      }
    }, 
    "/api/v1/workflow/tasks": {
      "get": {
        "description": "Args:\nid: The identifier assigned to the workflow.\n\nReturns:\nA JSON with the list of tasks included in the given workflow.", 
        "parameters": [
          {
            "in": "query", 
            "name": "id", 
            "required": false, 
            "schema": {
              "example": "6dc36257-abb6-45b5-b3bb-5f94160fc2ee", 
              "maxLength": 64, 
              "minLength": 0, 
              "type": "string"
            }
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseOK"
                }
              }
            }, 
            "description": "Successful response"
          }, 
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }, 
            "description": "Validation error"
          }
        }, 
        "summary": "Submit a request to the Knowledge Graph to retrieve the tasks defined in a workflow.", 
        "tags": [
          "Search Operations"
        ]
      }
    }
  }, 
  "tags": [
    {
      "description": "Knowledge Lake Management System", 
      "name": "KLMS"
    }, 
    {
      "description": "Spatio-TEmporal Linked data tools for the AgRi-food data space", 
      "name": "STELAR"
    }
  ]
}
